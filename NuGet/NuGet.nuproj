<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|AnyCPU">
      <Configuration>Debug</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|AnyCPU">
      <Configuration>Release</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\MVVMExtensions\MVVMExtensions.csproj" />
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>5f1d052e-9441-474f-9f5e-edf666dfe276</ProjectGuid>
  </PropertyGroup>
  <PropertyGroup>
    <NuProjPath Condition=" '$(NuProjPath)' == '' ">$(MSBuildExtensionsPath)\NuProj\</NuProjPath>
  </PropertyGroup>
  <Import Project="$(NuProjPath)\NuProj.props" Condition="Exists('$(NuProjPath)\NuProj.props')" />
  <PropertyGroup Label="Configuration">
    <Id>TommasoScalici.MVVMExtensions</Id>
    <Version>1.0.1.6</Version>
    <Title>MVVM Extensions</Title>
    <Authors>Tommaso Scalici</Authors>
    <Owners>Tommaso Scalici</Owners>
    <Summary>MVVM extensions for .NET Core with support for async commands, MVVM-friendly Task and UI notification.</Summary>
    <Description>This package is a useful collection of API designed for .NET Core for an extended and easier implementation of the MVVM design pattern. Essentially there are various implementations of the ICommand and INotifyPropertyChanged* interfaces, serving different purposes.

Here's a brief list of the API you can find:
•ObservableObject: Extend from this class to have an object that supports notifications without worrying to implement INotifyPropertyChanged.
•ObservableTask: A wrapper of Task that supports UI notifications.
•RelayCommand and RelayCommand&lt;T&gt;: Standard implementations (non-generic and generic) of the ICommand interface.
•AsyncCommand, AsyncCommand&lt;TResultgt; and AsyncCommand&lt;TParameter, TResult&gt;: Commands that execute asynchronous operations or Tasks.</Description>
    <ReleaseNotes>
    </ReleaseNotes>
    <ProjectUrl>https://github.com/TommasoScalici/MVVMExtensions</ProjectUrl>
    <LicenseUrl>https://github.com/TommasoScalici/MVVMExtensions/blob/master/LICENSE.md</LicenseUrl>
    <Copyright>Copyright © 2016 Tommaso Scalici</Copyright>
    <Tags>MVVM Model View ViewModel Pattern Extensions Async ICommand Command RelayCommand AsyncCommand Observable Task INotifyPropertyChanged UI Notification</Tags>
    <RequireLicenseAcceptance>true</RequireLicenseAcceptance>
  </PropertyGroup>
  <Import Project="$(NuProjPath)\NuProj.targets" />
</Project>